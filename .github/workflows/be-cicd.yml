name: CI/CD pipeline for Backend Service

on:
  push:
    branches: [master]

env:
  DOCKER_IMAGE: leetuan0342/my-spring-app
  DOCKER_TAG: 1.0


jobs:
  build:
    name: Build Backend Service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build --no-cache -t $DOCKER_IMAGE:$DOCKER_TAG .
          docker push $DOCKER_IMAGE:$DOCKER_TAG

      - name: Copy necessary files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: 3.0.104.231
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "compose.yml"
          target: "~/customer-service"

  deploy:
    name: Deploy Backend Service
    runs-on: ubuntu-latest
    needs: [ "build" ]

    steps:
      - name: Write Compose .env on server
        uses: appleboy/ssh-action@master
        with:
          host: 3.0.104.231
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            mkdir -p ~/customer-service
            cat > ~/customer-service/.env <<'EOF'
            SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            # SPRING_PROFILES_ACTIVE=prod
            # SERVER_PORT=8080
            EOF
            chmod 600 ~/customer-service/.env
      - name: Deploy Backend Service
        uses: appleboy/ssh-action@master
        with:
          host: 3.0.104.231
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
  
            # 1) Chọn lệnh compose phù hợp
            if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
              COMPOSE="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              COMPOSE="docker-compose"
            else
              echo "ERROR: Neither 'docker compose' (v2) nor 'docker-compose' (v1) is available."
              exit 1
            fi
  
            # 2) Nếu user không có quyền docker, fallback sang sudo
            DOCKER="docker"
            if ! $DOCKER ps >/dev/null 2>&1; then
              if command -v sudo >/dev/null 2>&1; then
                DOCKER="sudo docker"
                COMPOSE="sudo ${COMPOSE}"
              else
                echo "ERROR: Current user cannot access docker and sudo is not available."
                exit 1
              fi
            fi
  
            echo "Docker version:"
            $DOCKER version
            echo "Compose version:"
            $COMPOSE version
  
            # 3) Đảm bảo thư mục và file compose tồn tại
            mkdir -p ~/customer-service
            cd ~/customer-service
            test -f compose.yml || { echo "ERROR: compose.yml not found in $(pwd)"; ls -la; exit 1; }
  
            # 4) Login Docker Hub trên SERVER
            echo "Logging in to Docker Hub on server..."
            $DOCKER logout || true
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | $DOCKER login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
  
            # 5) Network external (nếu chưa có thì tạo)
            $DOCKER network inspect customer-network >/dev/null 2>&1 || $DOCKER network create customer-network
  
            # 6) Pull image mới, recreate service
            echo "Pulling images..."
            $COMPOSE -f compose.yml pull --quiet customer-service
  
            echo "Recreating service..."
            $COMPOSE -f compose.yml down --remove-orphans
            $COMPOSE -f compose.yml up -d
  
            echo "Containers:"
            $DOCKER ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'
            
            echo "=== Last 100 log lines of customer-service ==="
            $COMPOSE -f compose.yml logs --no-color --tail=100 customer-service || true
            
            # 7) Kiểm tra container có chạy không; nếu không, in logs và fail
            sleep 3
            if ! $DOCKER ps --filter "name=customer-service" --filter "status=running" --format '{{.Names}}' | grep -q '^customer-service$'; then
              echo "Container not running. Recent logs:"
              $COMPOSE -f compose.yml logs --no-color --tail=200 customer-service || true
              exit 1
            fi
  
            echo "Deployment completed successfully."
